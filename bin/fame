#!/usr/bin/env ruby

$LOAD_PATH.push File.expand_path('../../lib', __FILE__)

require 'rubygems'
require 'commander'
require 'colorize'
require 'fame/version'
require 'fame/interface_builder'
require 'fame/XLIFF'

#
# The Fame CLI
#
class FameApplication
  include Commander::Methods

  def run
    program :name, 'Fame'
    program :version, Fame::VERSION
    program :description, 'Replace identifiers within Apple Interface Builder files to use nice keys and descriptions for localization.'
    default_command :export

    #
    # Default localize command
    #
    command :export do |c|
      c.syntax = 'fame export [options] project.xcode.project'
      c.description = 'Replaces generated identifiers of the given Interface Builder file(s) and generates .strings files.'
      c.option '--path STRING', String, 'Path to an interface builder file or a folder that contains interface builder files.'

      c.action do |args, options|
        options.default :path => '.'

        raise "Provide a project file" unless args.count == 1

        project = args.first
        raise "The provided project file '#{project}' doesn't exist" unless File.exists?(project)

        files = Fame::InterfaceBuilder.determine_ib_files!(options.path)

        # Generate XLIFF translation files
        xliff = Fame::XLIFF.new
        xliff.generate(project)

      	# Collect IB nodes for each file
        puts "Collecting Interface Builder information for #{files.count} files".blue
        ib_nodes = []
      	files.each_with_index do |f, index|
          puts "  ✔︎ ".green + "(#{index+1}/#{files.count}) #{f}".black
      		ib = Fame::InterfaceBuilder.new
          ib_nodes += ib.nodes(f)
      	end

        xliff.update_trans_units(project, ib_nodes)

      end
    end

    run!
  end


end

# run application
FameApplication.new.run
